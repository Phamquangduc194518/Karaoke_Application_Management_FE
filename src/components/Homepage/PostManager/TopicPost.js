import React, { useState, useEffect } from "react";
import "./TopicPost.scss";
import { createTopic, createVideoOfTopic, getAllTopicsWithVideo } from "../../services/adminService";

const TopicPost = () => {
  const [newTopic, setNewTopic] = useState("");
  const [selectedTopic, setSelectedTopic] = useState("");
  const [newTitleVideo, setNewTitleVideo] = useState("");
  const [videoURL, setVideoURL] = useState("");
  const [thumbnail, setThumbnail] = useState("");
  const [topics, setTopics] = useState([]);
  const [activeTab, setActiveTab] = useState("create");
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState({ show: false, message: "" });

  const fetchTopics = async () => {
    try {
      setLoading(true);
      const topicList = await getAllTopicsWithVideo();
      setTopics(topicList.data);
      setLoading(false);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch topic:", error);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTopics();
  }, []);

  const handleAddTopic = async () => {
    if (!newTopic.trim()) {
      showNotification("Vui l√≤ng nh·∫≠p t√™n topic!");
      return;
    }

    try {
      setLoading(true);
      const response = await createTopic({ title: newTopic });
      if (response && response.id) {
        const newTopicObject = {
          id: response.id,
          title: response.title || newTopic,
          videos: []
        };
        setTopics((prevTopics) => [...prevTopics, newTopicObject]);
        setSelectedTopic(response.id.toString());
        setNewTopic("");
        fetchTopics();
        showNotification("T·∫°o topic th√†nh c√¥ng!", true);
      }
    } catch (error) {
      console.error("L·ªói khi t·∫°o topic:", error);
      showNotification("Kh√¥ng th·ªÉ t·∫°o topic. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async () => {
    if (!selectedTopic || !newTitleVideo.trim() || !videoURL.trim() || !thumbnail.trim()) {
      showNotification("Vui l√≤ng ƒëi·ªÅn ƒë·ªß th√¥ng tin.");
      return;
    }
    
    const video = {
      topicId: Number(selectedTopic),
      title: newTitleVideo.trim(),
      url: videoURL.trim(),
      thumbnail: thumbnail.trim()
    };
    
    try {
      setLoading(true);
      const response = await createVideoOfTopic(video);
      console.log("Video ƒë√£ ƒë∆∞·ª£c t·∫°o:", response);
      showNotification("Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!", true);
      setNewTitleVideo("");
      setVideoURL("");
      setThumbnail("");
      fetchTopics();
    } catch (error) {
      console.error("L·ªói khi t·∫°o video cho topic:", error);
      showNotification("Kh√¥ng th·ªÉ t·∫°o video cho topic. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  // Hi·ªÉn th·ªã th√¥ng b√°o
  const showNotification = (message, isSuccess = false) => {
    setSuccess({
      show: true,
      message: message,
      type: isSuccess ? "success" : "error"
    });

    // T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 3 gi√¢y
    setTimeout(() => {
      setSuccess({ show: false, message: "" });
    }, 3000);
  };

  // Chuy·ªÉn ƒë·ªïi URL YouTube th√†nh URL nh√∫ng
  const getEmbedUrl = (url) => {
    if (!url) return "";
    // X·ª≠ l√Ω URL YouTube
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
    const match = url.match(regExp);
    return match && match[2].length === 11
      ? `https://www.youtube.com/embed/${match[2]}`
      : url;
  };

  // Render topic v√† video list
  const renderTopicsList = () => {
    if (topics.length === 0) {
      return (
        <div className="empty-state">
          <div className="icon">üìã</div>
          <h3>Ch∆∞a c√≥ Topic n√†o</h3>
          <p>H√£y t·∫°o Topic m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu th√™m Video</p>
        </div>
      );
    }

    return (
      <div className="topics-list">
        {topics.map((topic) => (
          <div key={topic.id} className="topic-card">
            <div className="topic-header">
              <h3>{topic.title}</h3>
              <span className="video-count">
                {topic.videos ? topic.videos.length : 0} videos
              </span>
            </div>
            
            {topic.videos && topic.videos.length > 0 ? (
              <div className="videos-grid">
                {topic.videos.map((video) => (
                  <div key={video.id} className="video-item">
                    <div className="thumbnail-container">
                      <img
                        src={video.thumbnail}
                        alt={video.title}
                        className="video-thumbnail"
                      />
                      <div className="play-button">
                        <i className="fas fa-play"></i>
                      </div>
                    </div>
                    <h4 className="video-title">{video.title}</h4>
                  </div>
                ))}
              </div>
            ) : (
              <div className="no-videos">
                <p>Ch∆∞a c√≥ video n√†o trong topic n√†y</p>
              </div>
            )}
          </div>
        ))}
      </div>
    );
  };

  return (
    <div className="container_topic">
      <h2 className="title">Qu·∫£n l√Ω Topic v√† Video</h2>

      {/* Tabs Navigation */}
      <div className="tabs-navigation">
        <button 
          className={`tab-button ${activeTab === "create" ? "active" : ""}`}
          onClick={() => setActiveTab("create")}
        >
          <i className="fas fa-plus-circle"></i>
          T·∫°o m·ªõi Topic & Video
        </button>
        <button 
          className={`tab-button ${activeTab === "list" ? "active" : ""}`}
          onClick={() => setActiveTab("list")}
        >
          <i className="fas fa-list"></i>
          Danh s√°ch Topic & Video
        </button>
      </div>

      {/* Notification */}
      {success.show && (
        <div className={`notification ${success.type}`}>
          <i className={`fas ${success.type === "success" ? "fa-check-circle" : "fa-exclamation-circle"}`}></i>
          <span>{success.message}</span>
        </div>
      )}

      {/* Create Tab Content */}
      {activeTab === "create" && (
        <>
          <div className="form_container_topic">
            {/* C·ªôt tr√°i - T·∫°o Topic */}
            <div className="column_topic">
              <h3 className="section-title">
                <i className="fas fa-folder-plus"></i>
                T·∫°o Topic M·ªõi
              </h3>
              <label className="label">T√™n topic m·ªõi:</label>
              <div className="input-group">
                <input
                  type="text"
                  value={newTopic}
                  onChange={(e) => setNewTopic(e.target.value)}
                  placeholder="Nh·∫≠p t√™n topic"
                />
                <button 
                  className="btn-add-topic" 
                  onClick={handleAddTopic}
                  disabled={loading}
                >
                  {loading ? "ƒêang t·∫°o..." : "Th√™m Topic"}
                </button>
              </div>
              <div className="info-box">
                <i className="fas fa-info-circle"></i>
                <p>Topic l√† ch·ªß ƒë·ªÅ ƒë·ªÉ nh√≥m c√°c video li√™n quan ƒë·∫øn nhau.</p>
              </div>
            </div>

            {/* C·ªôt ph·∫£i - Ch·ªçn Topic v√† nh·∫≠p Video */}
            <div className="column_topic">
              <h3 className="section-title">
                <i className="fas fa-video"></i>
                Th√™m Video V√†o Topic
              </h3>
              <label className="label">Ch·ªçn topic:</label>
              <select 
                value={selectedTopic} 
                onChange={(e) => setSelectedTopic(e.target.value)}
                className="select-topic"
              >
                <option value="">-- Ch·ªçn topic --</option>
                {topics.map((topic) => (
                  <option key={topic.id} value={topic.id}>
                    {topic.title}
                  </option>
                ))}
              </select>

              <label className="label">Ti√™u ƒë·ªÅ Video:</label>
              <input
                type="text"
                value={newTitleVideo}
                onChange={(e) => setNewTitleVideo(e.target.value)}
                placeholder="Nh·∫≠p ti√™u ƒë·ªÅ video"
              />

              <label className="label">URL Video:</label>
              <input
                type="text"
                value={videoURL}
                onChange={(e) => setVideoURL(e.target.value)}
                placeholder="Nh·∫≠p URL video (YouTube)"
              />

              <label className="label">URL ·∫¢nh ƒë·∫°i di·ªán:</label>
              <input
                type="text"
                value={thumbnail}
                onChange={(e) => setThumbnail(e.target.value)}
                placeholder="Nh·∫≠p URL cho thumbnail"
              />
              
              {/* Preview section */}
              <div className="preview-section">
                {thumbnail && (
                  <div className="preview-item">
                    <h4>Preview Thumbnail:</h4>
                    <img src={thumbnail} alt="Thumbnail Preview" className="thumbnail-preview" />
                  </div>
                )}
                
                {videoURL && (
                  <div className="preview-item">
                    <h4>Preview Video:</h4>
                    <div className="video-embed">
                      <iframe
                        src={getEmbedUrl(videoURL)}
                        title="Video Preview"
                        frameBorder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowFullScreen
                      ></iframe>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          <button 
            className="btn-submit" 
            onClick={handleSubmit}
            disabled={loading}
          >
            {loading ? (
              <>
                <i className="fas fa-spinner fa-spin"></i>
                ƒêang x·ª≠ l√Ω...
              </>
            ) : (
              <>
                <i className="fas fa-save"></i>
                L∆∞u Video
              </>
            )}
          </button>
        </>
      )}

      {/* List Tab Content */}
      {activeTab === "list" && (
        <div className="list-content">
          {loading ? (
            <div className="loading-container">
              <div className="spinner"></div>
              <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
            </div>
          ) : (
            renderTopicsList()
          )}
        </div>
      )}
    </div>
  );
};

export default TopicPost;